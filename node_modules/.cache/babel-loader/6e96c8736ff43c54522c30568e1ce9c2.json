{"ast":null,"code":"import _objectSpread from \"/Users/willstone/github/prep work/pokedex/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/willstone/github/prep work/pokedex/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/willstone/github/prep work/pokedex/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/willstone/github/prep work/pokedex/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/willstone/github/prep work/pokedex/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/willstone/github/prep work/pokedex/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/willstone/github/prep work/pokedex/pokedex/src/components/App.js\";\nimport React from \"react\";\nimport Header from \"./Header\";\nimport Order from \"./Order\";\nimport Inventory from \"./Inventory\";\nimport sampleFishes from \"../sample-fishes\";\nimport Fish from \"./Fish\";\nimport base from '../base';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fishes: {},\n      order: {}\n    };\n\n    _this.addFish = function (fish) {\n      // how do we update state?\n      // 1. take a copy of existing state\n      var fishes = _objectSpread({}, _this.state.fishes); // 2. add our new fish to that fishes variable\n\n\n      fishes[\"fish\".concat(Date.now())] = fish; // 3. set the new fishes object to state\n\n      _this.setState({\n        fishes: fishes\n      });\n    };\n\n    _this.loadSampleFishes = function () {\n      _this.setState({\n        fishes: sampleFishes\n      });\n    };\n\n    _this.addToOrder = function (key) {\n      // 1. take a copy of state\n      var order = _objectSpread({}, _this.state.order); // 2. either add to the order or update the number in our order\n\n\n      order[key] = order[key] + 1 || 1; // if order[key] exists, it'll increment by 1, or return 1 if it doesn't\n      // 3. call set state to update our state object\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // sync with the name of this specific store\n      var params = this.props.match.params; // first reinstate our local storage\n\n      var localStorageRef = localStorage.getItem(params.storeId);\n\n      if (localStorageRef) {\n        // the opposite of JSON.stringify is JSON.parse -- turn it back into an object\n        this.setState({\n          order: JSON.parse(localStorageRef)\n        });\n      } // reference to the db\n\n\n      this.ref = base.syncState(\"\".concat(params.storeId, \"/fishes\"), {\n        context: this,\n        state: 'fishes'\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      //  set local storage // store order for that specific store\n      localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order)); // JSON.stringify to convert object to string\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      base.removeBinding(this.ref);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"catch-of-the-day\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Header, {\n        tagline: \"Fresh Seafood Market\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        className: \"fishes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, Object.keys(this.state.fishes).map(function (key) {\n        return React.createElement(Fish, {\n          key: key,\n          index: key,\n          details: _this2.state.fishes[key],\n          addToOrder: _this2.addToOrder,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        });\n      }))), React.createElement(Order, {\n        fishes: this.state.fishes,\n        order: this.state.order,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(Inventory, {\n        addFish: this.addFish,\n        loadSampleFishes: this.loadSampleFishes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/willstone/github/prep work/pokedex/pokedex/src/components/App.js"],"names":["React","Header","Order","Inventory","sampleFishes","Fish","base","App","state","fishes","order","addFish","fish","Date","now","setState","loadSampleFishes","addToOrder","key","params","props","match","localStorageRef","localStorage","getItem","storeId","JSON","parse","ref","syncState","context","setItem","stringify","removeBinding","Object","keys","map","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Header from \"./Header\";\nimport Order from \"./Order\";\nimport Inventory from \"./Inventory\";\nimport sampleFishes from \"../sample-fishes\";\nimport Fish from \"./Fish\"; \nimport base from '../base';\n\n\n\nclass App extends React.Component {\n    state = {\n        fishes: {},\n        order: {}\n    };\n\n    componentDidMount() {\n        // sync with the name of this specific store\n        const { params } = this.props.match;\n        // first reinstate our local storage\n        const localStorageRef = localStorage.getItem(params.storeId);\n        if(localStorageRef) {\n            // the opposite of JSON.stringify is JSON.parse -- turn it back into an object\n            this.setState({order: JSON.parse(localStorageRef)});\n        }\n        // reference to the db\n        this.ref = base.syncState(`${params.storeId}/fishes`, {\n            context: this,\n            state: 'fishes'\n        });\n    };\n\n    componentDidUpdate() {\n        //  set local storage // store order for that specific store\n        localStorage.setItem(this.props.match.params.storeId,JSON.stringify(this.state.order)); // JSON.stringify to convert object to string\n    };\n\n    componentWillUnmount() {\n        base.removeBinding(this.ref);\n    };\n\n    addFish = (fish) => {\n        // how do we update state?\n        // 1. take a copy of existing state\n        const fishes = {...this.state.fishes};\n        // 2. add our new fish to that fishes variable\n        fishes[`fish${Date.now()}`] = fish;\n        // 3. set the new fishes object to state\n        this.setState({\n            fishes: fishes\n        });\n    };\n\n    loadSampleFishes = () => {\n        this.setState({\n            fishes: sampleFishes\n        });\n    };\n\n    addToOrder = (key) => {\n        // 1. take a copy of state\n        const order = { ...this.state.order };\n        // 2. either add to the order or update the number in our order\n        order[key] = order[key] + 1 || 1; // if order[key] exists, it'll increment by 1, or return 1 if it doesn't\n        // 3. call set state to update our state object\n        this.setState({ order })\n    }\n\n    render() {\n        return (\n            <div className=\"catch-of-the-day\">\n                <div className=\"menu\">\n                    <Header tagline=\"Fresh Seafood Market\"/>\n                    <ul className=\"fishes\">\n                        {/* gives us all of the keys  */}\n                        {/* we use the key attribute to assign a unique identifier to each fish or react gets cranky */}\n                        {Object.keys(this.state.fishes).map(key => (\n                        <Fish\n                         key={key}\n                         index={key}\n                         details={this.state.fishes[key]} \n                         addToOrder={this.addToOrder}\n                         />\n                         ))}\n                    </ul>\n                </div>\n                <Order fishes={this.state.fishes} order={this.state.order}/>\n                <Inventory\n                 addFish={this.addFish}\n                 loadSampleFishes={this.loadSampleFishes}\n                  />\n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}