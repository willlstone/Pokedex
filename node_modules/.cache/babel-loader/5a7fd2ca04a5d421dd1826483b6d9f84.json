{"ast":null,"code":"import _classCallCheck from \"/Users/willstone/github/prep work/pokedex/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/willstone/github/prep work/pokedex/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/willstone/github/prep work/pokedex/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/willstone/github/prep work/pokedex/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/willstone/github/prep work/pokedex/pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/willstone/github/prep work/pokedex/pokedex/src/components/App.js\";\nimport React from \"react\";\nimport sampleFishes from \"../sample-fishes\";\nimport base from '../base';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fishes: {},\n      order: {}\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // sync with the name of this specific store\n      var params = this.props.match.params; // first reinstate our local storage\n\n      var localStorageRef = localStorage.getItem(params.storeId);\n\n      if (localStorageRef) {\n        // the opposite of JSON.stringify is JSON.parse -- turn it back into an object\n        this.setState({\n          order: JSON.parse(localStorageRef)\n        });\n      } // reference to the db\n\n\n      this.ref = base.syncState(\"\".concat(params.storeId, \"/fishes\"), {\n        context: this,\n        state: 'fishes'\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      //  set local storage // store order for that specific store\n      localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order)); // JSON.stringify to convert object to string\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      base.removeBinding(this.ref);\n    }\n  }, {\n    key: \"render\",\n    // addFish = (fish) => {\n    //     // how do we update state?\n    //     // 1. take a copy of existing state\n    //     const fishes = {...this.state.fishes};\n    //     // 2. add our new fish to that fishes variable\n    //     fishes[`fish${Date.now()}`] = fish;\n    //     // 3. set the new fishes object to state\n    //     this.setState({\n    //         fishes: fishes\n    //     });\n    // };\n    // loadSampleFishes = () => {\n    //     this.setState({\n    //         fishes: sampleFishes\n    //     });\n    // };\n    // addToOrder = (key) => {\n    //     // 1. take a copy of state\n    //     const order = { ...this.state.order };\n    //     // 2. either add to the order or update the number in our order\n    //     order[key] = order[key] + 1 || 1; // if order[key] exists, it'll increment by 1, or return 1 if it doesn't\n    //     // 3. call set state to update our state object\n    //     this.setState({ order })\n    // }\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"catch-of-the-day\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Header, {\n        tagline: \"Fresh Seafood Market\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/willstone/github/prep work/pokedex/pokedex/src/components/App.js"],"names":["React","sampleFishes","base","App","state","fishes","order","params","props","match","localStorageRef","localStorage","getItem","storeId","setState","JSON","parse","ref","syncState","context","setItem","stringify","removeBinding","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,IAAP,MAAiB,SAAjB;;IAIMC,G;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,KAAK,EAAE;AAFH,K;;;;;;wCAKY;AAChB;AADgB,UAERC,MAFQ,GAEG,KAAKC,KAAL,CAAWC,KAFd,CAERF,MAFQ,EAGhB;;AACA,UAAMG,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqBL,MAAM,CAACM,OAA5B,CAAxB;;AACA,UAAGH,eAAH,EAAoB;AAChB;AACA,aAAKI,QAAL,CAAc;AAACR,UAAAA,KAAK,EAAES,IAAI,CAACC,KAAL,CAAWN,eAAX;AAAR,SAAd;AACH,OARe,CAShB;;;AACA,WAAKO,GAAL,GAAWf,IAAI,CAACgB,SAAL,WAAkBX,MAAM,CAACM,OAAzB,cAA2C;AAClDM,QAAAA,OAAO,EAAE,IADyC;AAElDf,QAAAA,KAAK,EAAE;AAF2C,OAA3C,CAAX;AAIH;;;yCAEoB;AACjB;AACAO,MAAAA,YAAY,CAACS,OAAb,CAAqB,KAAKZ,KAAL,CAAWC,KAAX,CAAiBF,MAAjB,CAAwBM,OAA7C,EAAqDE,IAAI,CAACM,SAAL,CAAe,KAAKjB,KAAL,CAAWE,KAA1B,CAArD,EAFiB,CAEuE;AAC3F;;;2CAEsB;AACnBJ,MAAAA,IAAI,CAACoB,aAAL,CAAmB,KAAKL,GAAxB;AACH;;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AACL,aACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,sBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CADJ;AAOH;;;;EAlEajB,KAAK,CAACuB,S;;AAqExB,eAAepB,GAAf","sourcesContent":["import React from \"react\";\nimport sampleFishes from \"../sample-fishes\";\nimport base from '../base';\n\n\n\nclass App extends React.Component {\n    state = {\n        fishes: {},\n        order: {}\n    };\n\n    componentDidMount() {\n        // sync with the name of this specific store\n        const { params } = this.props.match;\n        // first reinstate our local storage\n        const localStorageRef = localStorage.getItem(params.storeId);\n        if(localStorageRef) {\n            // the opposite of JSON.stringify is JSON.parse -- turn it back into an object\n            this.setState({order: JSON.parse(localStorageRef)});\n        }\n        // reference to the db\n        this.ref = base.syncState(`${params.storeId}/fishes`, {\n            context: this,\n            state: 'fishes'\n        });\n    };\n\n    componentDidUpdate() {\n        //  set local storage // store order for that specific store\n        localStorage.setItem(this.props.match.params.storeId,JSON.stringify(this.state.order)); // JSON.stringify to convert object to string\n    };\n\n    componentWillUnmount() {\n        base.removeBinding(this.ref);\n    };\n\n    // addFish = (fish) => {\n    //     // how do we update state?\n    //     // 1. take a copy of existing state\n    //     const fishes = {...this.state.fishes};\n    //     // 2. add our new fish to that fishes variable\n    //     fishes[`fish${Date.now()}`] = fish;\n    //     // 3. set the new fishes object to state\n    //     this.setState({\n    //         fishes: fishes\n    //     });\n    // };\n\n    // loadSampleFishes = () => {\n    //     this.setState({\n    //         fishes: sampleFishes\n    //     });\n    // };\n\n    // addToOrder = (key) => {\n    //     // 1. take a copy of state\n    //     const order = { ...this.state.order };\n    //     // 2. either add to the order or update the number in our order\n    //     order[key] = order[key] + 1 || 1; // if order[key] exists, it'll increment by 1, or return 1 if it doesn't\n    //     // 3. call set state to update our state object\n    //     this.setState({ order })\n    // }\n\n    render() {\n        return (\n            <div className=\"catch-of-the-day\">\n                <div className=\"menu\">\n                    <Header tagline=\"Fresh Seafood Market\"/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}